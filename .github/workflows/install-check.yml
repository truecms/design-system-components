name: Install Check

on:
  push:
    branches:
      - main
      - 'release/**'
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  install-check:
    name: Node ${{ matrix.node-version }} install sweep
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        node-version: ['22.x', 'lts/*']
    env:
      CI: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libc6 libnss3 libatk1.0-0 libatk-bridge2.0-0 libdrm2 libxkbcommon0 libxcomposite1 libxdamage1 libxfixes3 libgbm1 libpango-1.0-0 libcairo2

      - name: Set up pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm run build

      - name: Run tests
        run: pnpm run test

      - name: Verify package tarballs install cleanly
        run: |
          set -euo pipefail
          node <<'NODE'
          const { execSync } = require('child_process');
          const fs = require('fs');
          const os = require('os');
          const path = require('path');

          const workspace = process.env.GITHUB_WORKSPACE;
          const tarballDir = path.join(workspace, 'dist', 'tarballs');
          const runnerTemp = process.env.RUNNER_TEMP || os.tmpdir();

          fs.rmSync(tarballDir, { recursive: true, force: true });
          fs.mkdirSync(tarballDir, { recursive: true });

          process.stdout.write('::group::Packing workspace packages with pnpm\n');
          execSync(`pnpm -r --workspace-concurrency 1 pack --pack-destination "${tarballDir}"`, {
            cwd: workspace,
            stdio: 'inherit'
          });
          process.stdout.write('::endgroup::\n');

          const tarballs = fs
            .readdirSync(tarballDir)
            .filter((file) => file.endsWith('.tgz'))
            .sort((a, b) => a.localeCompare(b));

          if (tarballs.length === 0) {
            throw new Error('No tarballs were produced by pnpm pack');
          }

          const summary = [];

          for (const tarball of tarballs) {
            const safeName = tarball.replace(/[^A-Za-z0-9.-]/g, '-').replace(/\.tgz$/, '');
            const installDir = path.join(runnerTemp, `install-${safeName}`);
            const tarballPath = path.join(tarballDir, tarball);

            process.stdout.write(`::group::Verifying ${tarball}\n`);

            fs.rmSync(installDir, { recursive: true, force: true });
            fs.mkdirSync(installDir, { recursive: true });
            const installPackageJson = {
              name: `verify-${safeName}`.toLowerCase(),
              private: true,
              version: '0.0.0'
            };
            fs.writeFileSync(
              path.join(installDir, 'package.json'),
              JSON.stringify(installPackageJson, null, 2)
            );
            execSync(`pnpm add "${tarballPath}"`, { cwd: installDir, stdio: 'inherit' });

            summary.push({
              tarball: tarball,
              installDir: path.relative(workspace, installDir)
            });

            process.stdout.write('::endgroup::\n');
          }

          fs.writeFileSync(
            path.join(tarballDir, 'pack-summary.json'),
            JSON.stringify(summary, null, 2)
          );
          NODE

      - name: Clean tarballs
        if: always()
        run: |
          rm -rf dist/tarballs
          pnpm store prune
