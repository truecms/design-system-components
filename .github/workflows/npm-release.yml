name: npm Release

on:
  workflow_dispatch:
    inputs:
      npm_scope:
        description: 'npm scope to publish packages under (include leading @)'
        default: '@truecms'
        required: false
      dist_tag:
        description: 'npm dist-tag to apply to published packages'
        default: latest
        required: false
      dry_run:
        description: 'Run Changesets publish with --dry-run to validate pipeline'
        type: boolean
        default: true
  release:
    types: [published]

jobs:
  release:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      CI: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Set up Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'

      - name: Configure npm authentication
        run: |
          npm config set //registry.npmjs.org/:_authToken "${NPM_TOKEN}"
          npm whoami || npm whoami
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN_TRUECMS }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm run build

      - name: Run tests
        run: pnpm run test

      - name: Publish packages with Changesets
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN_TRUECMS }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN_TRUECMS }}
          INPUT_SCOPE: ${{ inputs.npm_scope }}
          INPUT_DIST_TAG: ${{ inputs.dist_tag }}
          INPUT_DRY_RUN: ${{ inputs.dry_run }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
        run: |
          set -euo pipefail

          scope="${INPUT_SCOPE:-@truecms}"
          dist_tag="${INPUT_DIST_TAG:-latest}"
          dry_run_flag="${INPUT_DRY_RUN:-true}"

          if [ "$GITHUB_EVENT_NAME" = "release" ]; then
            dry_run_flag="false"
            dist_tag="latest"
          fi

          export NPM_PUBLISH_SCOPE="$scope"
          npm config set scope "${scope#@}"

          args=(--tag "$dist_tag")
          if [ "$dry_run_flag" = "true" ]; then
            args+=(--dry-run)
          fi

          pnpm run release -- "${args[@]}"

      - name: Post-release cleanup
        if: always()
        run: pnpm store prune
